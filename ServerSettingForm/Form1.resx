<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKRhTACiYU4Dp2JLKKZjSWqnY0irpmJI2adj
        SPGoY0j8qGNI/KdjSPGnYkjYp2NIq6djSWqnYkgnoWRPA6VjTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBkTQCdZVEDpmNJM6hjSZOoY0jeqGNI+6hj
        SP+nYkf/p2JH/6hjSP+oY0j/p2JH/6hjR/+oY0j/qGNI+6ljSN2pY0mUp2NLNaFiUQOjY04AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJprWgCoYEYApWJKFqdiSIOnYkjnqGNI/6hj
        SP+oY0j/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6hjSP+oY0j/qGNI/6hjSP+oY0joqGNJhKVj
        SxeqYkgAfmNaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdZU8ArF5BAKRhSDGmYUe8p2JG/adi
        R/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6di
        R/+nYkf9p2FHvaRgSDK1XEAAlmROAAAAAAAAAAAAAAAAAAAAAAAAAAAAnmROAKleQACjYEY8pWFG1aZh
        Rv+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6di
        R/+nYkf/p2JH/6ZhRv+nYUb/pmFG1qNgRT2vYkMAl19JAAAAAAAAAAAAAAAAAJViUQCkYEQAo2BGMaRg
        RNWmYUX/pmFG/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2FH/6diR/+nYkf/p2JH/6di
        R/+nYkf/p2JH/6diR/+nYkf/pmFG/6ZhRv+mYUb/pmBF1qJfRTKkYEMAmFtKAAAAAAAAAAAApWFIAKRh
        ShilYEW+pGBD/qNfRLCgXUOJoF1DiaFdQ4qiXkSLol5EiqJeRIqhXkSKoV1EiqFdQomhXUOJoV1EiaFd
        RImhXkWJoV5FjKJfRZSkYEacpmFH4KdiR/+nYkf/pmFG/6ZhRv+nYUX/pmBFvaNgRxikYUcAAAAAAJ5h
        TQCOYl4BpmFHhKZgRf+lYETpoF5GK5FGKwDSoIwK06COAtGfjwPQn40Jxa2cAMmtngAAAAAAAAAAAAAA
        AACcW0sAm1tLBJlYSgSmZU0dqmRKrKlkSbumYkfgp2FH/6ZhRv+mYUb/pmFG/6diRf+oYUX/pmFGhI5c
        WgGiYEsApWFIAKVhSTOnYUbmpmFG/6ZhRuehXEQk05qCKtKXfsHRln5T0ZR7X9GUe7rNknshy4xzVMyM
        c5fNjXOU0JF3k9GTeI+xbFGnpF5Eo6ZhR4GmYkiyo2JJSqNhSFenYUbhp2FF/6ZhRv+mYUb/pmFG/6dh
        Rv+nYUbmpmFGMqdgRgCOaGYBqGJHkKhhRv+mYUb/pmFG56JdRSTSmoIp0pd9v9KXf1LQk3td0ZN6uM6T
        eyDKiXBUzIlwls2McZLNjHGdunZa6qhgRcWkXkSepl9E6qRgRoDQYjcAoV5GD6ZgRbOlYEThpGBFkqVg
        ReGlYUX/pmFG/6hiRv+nYkeRhF5gAaRiSiWoYkfap2JH/6ZhRv+mYUbvpGFHR51bRBOsbVYhoF5IF6Ff
        SRira1UfnlpEFZxXQhSaVD8UmFQ+EaFaQUKlXEDHoVxDK6BeRgihXUMsm1xECqFeQwC6cT4An1lDFp5a
        QymBWVQBol9FXKRgRPemYUb/p2JH/6hiR9umY0kmpmFHZ6hhRvqnYkf/pmFG/6ZhRv+lYEXfpF5ExaNe
        Q8WkXkTGpF5ExqVdQ8WlXkTHpl1Ex6ZeRMimXkTHpl5DzqZdQemkXUJarGE8AKBhTQGkX0YwpWBFbaRf
        RWGiXkYbplxBAJhXRASkX0OLpWBE/qZhRv+nYkf/qGJH+qdiSGinYEaop2FG/6diR/+mYUb/pmFG9aRh
        R22hXUM2oFxBNqJeRDiiXUQ4oVxCNqReRDmhXEI4nlk/NaNeRGylXkTPpl5B8KRdQYKsYDwAo19FS6Zg
        ROOnYET/pmBE/qZgRMOjX0Ykn1tHBqVfRK+lYEP7pmFF/qdiR/+oYkb/pmJGqKZgRdanYUb/p2JH/6di
        R/+mYUfnomFHJdijjhbUnIV305yFLdKXgTjTl4By0ZaCD9OWgR/Xnoc2tHFXf6dfRb+mYUZBpGBHFqFg
        SwimYES2qGFF/6hhRv+oYUb/pmBE/6VfRIWtYD0AnlxDI6FdQ1OmYUXgp2JG/6hhRv+nYUbWpmBD76di
        Rv+nYkf/p2JH/6ZhR+egXUUj05yFOdOagenRmIJo0JN8e9GUfODNkn0o0pR+ctSYf83BgGfhqF9GqKh1
        YgKjYkoAo19HEqZgRM+oYkX/qGFG/6dhRv+mYUT/pl9Do5FTTQGiXEQAo1xDFqdgRNamYUb/p2FG/6dg
        RfClX0L7pmFG/6diR/+nYkf/pmFH56RhSSbww7ID0ZmBKs6Ygg3LkXwRzpN9J8qRfwPSlYEM4KiREatl
        TWSmXUTRp2FHh6ZhRzuFZWUBpWBFm6dhRf+oYUb/qGFG/6dhRf2lX0RtrV87AKRhRk2lYEWSp2FF66Zi
        Rf+nYUb/p2BF/KVfQ/umYUb/p2JH/6diR/+mYUfno2BHJdSfiRLQmYFi0JmCI9CVfyzRlH5bzJJ+DMqP
        eR7Nkno0vn5nULNwWIipYUjXpV5Ems9hEACkYUgjpmBGradhRuynYUbnpWBGkKNgRxCiXkwJp2FGuadh
        Rf+nYUX/pmFG/6dhRv+nYET8pmBE8KZhRv+nYkf/p2JH/6ZhR+egXUQj0ZmCPdKYgPDSmYFo0pV+ftKU
        fOfMknwpzpJ6cNCTeszQk3rHyIhu0qtkSuGjXEQ+pl5DAKJfRgCfXkcLpWBHLaRgRyedX0cFoF9HAKxp
        OQCkYEhTpWBF8KZhRv+mYUb/pmFG/6ZhRvGmYEbYp2FG/6ZhR/+nYkf/pmJH6aRiSinntKEH05uDO9Ke
        hxPSmIIZ0peAOc6ZhAXVoYsM16KLFdqnjxOycFgxpl5Ft6VfRWalYksnpmFIdaNgSTG6Z0cAnmBTAqRf
        Rj+kYEVroV9IFaRhR3OlYUX3pmFG/6diR/+nYkf/pmFH2KZhRquoYUb/p2JH/6diR/+nYkb7qGJIpKpk
        S3apY0t0rGVNd6xlTXarY0t0q2VMd6xkS3etYkp2rGNKdqxjSnSqYkiiqGBF7KhhR9+oYUb/pmBFoTBr
        lgCfXEcOpV9Ex6dgRPymYUbEpmFG8KZhRv+mYUb/p2JH/6diR/+nYkirpmFIaKhiR/qnYkf/p2JH/6dh
        Rv2nYUe6qWJIkalhSJGrYkqSq2NKkatjSZCrYkiTq2FHkqthSJGrYEaRql9FkqlfRJCoX0ORqF9Ekade
        Q6emXUHMpF1CeaVfRICmYETmp2FF/6dhRv+mYUb/pmFG/6ZhRv+nYkf/p2JH+qdiSWmlYEonqGJH3Kdi
        Rv+mYUb/pmJH6qRkSy3/+ucC0ZiAJNCYgQrOk30OzpJ8Is+TgQLMjXgKy453EsuNdBLMjHQSzIt0EsuL
        dRLPj3gSuHVdJqhgRn2lXUJ+pl9Et6dhRf+mYUb/pmFG/6ZhRv+mYUb/pmFG/6diRv+nYUfcpGFJJ5Rq
        WwKnYkeTqGJG/6ZhRv+nYkjnomFHJNKXgDXSlXzj0JV9Y8+ReHbPkHfbyo53J8+Lc3HPi3LQz4tvzM+K
        b8vOim/LzotwzM6LcM3Oi3DQzo1zcrRsTwCkX0Vvp2FF/6ZhRv+mYUb/pmFG/6ZhRv+mYUb/p2FG/6Zh
        R5OMY1cCp2FIAKZhSTWoYUfnp2JG/6diR+ekYkkl1JqDG9GVfIrQlH01z5F5RM6Qd4fJjncTzo11KM+N
        dUrOjXNIz4xzSc6LckjPjHJIzoxySc6Nc0rOjnUprWZJAKRfRG+mYUX/pmFG/6ZhRv+mYUb/pmFG/6Zh
        Rv+nYkfmpWFINKZhSACkY08An2NdAqdiSYWnYUb/p2FH7qRiSTqLUT8EjFI/BpJWPweUWEMHlVdGB6Fg
        SweRUT0GdTEgBG8tHgRsNB0Edz4lBXs/KgV3PSYEcTgkBItOOAabX0wGpF9FgaZhRf+mYUb/pmFG/6Zh
        Rv+mYUb/p2FG/qdiSIOYbWIBo2ROAAAAAACkY0oApGNLGKZhR76nYUb/pmFH1qZhR7umYki8p2NIvKdi
        SLymYki8qGJIu6hiSLupYke7qGBGu6ZgRbynYEW9p2FGvadhRr2oYUe8pmFGvKZhRr2mYUbppmFG/6Zh
        Rv+mYUb/pmFG/6ZhRv+lYUa9pGJKF6ViSQAAAAAAAAAAAI1lUwCnYEcApGFIM6VhR9enYkf/p2JH/6di
        R/+nYkf/p2JH/6diR/+nYkf/p2JH/6hiR/+oYkf/p2FG/6dhRv+oYUb/qGFG/6dhRv+mYUb/pmFG/6Zh
        Rv+mYUb/pmFG/6ZhRv+mYUb/pmFG1qVhSDOoYUYAlGJSAAAAAAAAAAAAAAAAAJhhUACuZEMAo2JJQKZi
        SNenYkf/p2JH/6diR/+nYkf/p2JH/6ZhRv+mYUb/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6di
        R/+mYUb/pmFG/6ZhRv+mYUb/pmFG/6ZhRtWlYUg9q15AAKBlUQAAAAAAAAAAAAAAAAAAAAAAAAAAAJph
        TwC0ZUAApGNKNKZiSMCnYkf+p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6di
        R/+mYUb/pmFG/6ZhRv+mYUb/pmFG/6dhRv6mYUa/pWFIMqxePgCgZFEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAI1nWgCqZEgApGRMGKhjSoioYkjpp2JH/6diR/+nYkf/p2JH/6diR/+nYkf/p2JH/6di
        R/+nYkf/p2JH/6diR/+nYkf/p2JH/6dhRv+nYUbqpmFGiKRhSRioYEYAlmBNAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnZVEApmdYA6diSjWnYkiVp2JH3qdiR/unYUb/pmFG/6Zh
        Rv+nYkf/p2JH/6diR/+nYkf/qGJH/6liR/uoYkfgqGFImKZhRzefYU0DoWBJAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApGJLAKRjTgOlYUkopmFHaqdh
        R62mYUfapmFG8qZhRfynYUb9p2JH8qdiR9qnYkeupmFIbaZiSSqkYk8EpmBNAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4IfgAGAAAABAAAEAAAA
        BgAAACCAAAAgAAAAAEAAAEAgAAAAQAAAIAAAADDAAAAEAAAABAAAAAAAAAAAAAAABACAAAQBgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>